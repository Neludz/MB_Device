#compiler and linker flags
CC			:= gcc
SRC_DIRS	:= src	src/user_lib
BIN_DIR 	:= bin
BIN_EXE		:= $(BIN_DIR)/test
OUTPUT		:= $(BIN_EXE)
OBJ_DIR		:= obj
INC_DIRS	:= -Isrc/user_lib -Isrc
INCLUDES 	:= $(foreach dir, $(SRC_DIRS), $(addprefix -I, $(dir)))
TARGETDIRS 	:= $(foreach dir, $(SRC_DIRS), $(addprefix $(OBJ_DIR)/, $(dir)))
LIB_DIRS	:=
SRC_FILES	:= $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c))
H_FILES		:= $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.h))#$(wildcard $(SRC_DIR)/*/*.h $(SRC_DIR)/*.h)
OBJ_FILES	:= $(addprefix $(OBJ_DIR)/, $(patsubst %.c, %.o, $(SRC_FILES)))#TARGETDIRS = $(foreach dir, $(DIRS), $(addprefix $(BUILDDIR)/, $(dir)))

CPP_FLAF	:= -o3
LD_FLAGS	:= -o3
MAKEFLAGS	:=
VPATH = $(SRC_DIRS)
# Decide whether the commands will be shwon or not
VERBOSE = TRUE

# Hide or not the calls depending of VERBOSE
ifeq ($(VERBOSE),TRUE)
    HIDE =
else
    HIDE = @
endif

    RM = rm -rf 
    RMDIR = rm -rf 
    MKDIR = mkdir -p
    ERRIGNORE = 2>/dev/null
    SEP=/
# Remove space after separator
PSEP = $(strip $(SEP))

# Define the function that will generate each rule
define generateRules
$(1)/%.o: %.c
	@echo Building $$@
	$(HIDE)$(CC) -c $$(INCLUDES) -o $$(subst /,$$(PSEP),$$@) $$(subst /,$$(PSEP),$$<) -MMD
endef

# $(wildcard $(SRC_DIR)/*/*.c $(SRC_DIR)/*.c)
#$(OBJ_DIR1)/%.o:	$(SRC_DIRS)/%.c $(H_FILES)
#	$(CC) $(CPP_FLAF) $(INC_DIRS) -c -o $@ $<


.PHONY: all clean directories 

all:	$(info TARGETDIRS is $(TARGETDIRS))\
 		$(info OBJ_FILES is $(OBJ_FILES))\
 		(info INC_DIRS is $(INC_DIRS))\
  		directories $(BIN_EXE)

# Generate rules
$(foreach targetdir, $(TARGETDIRS), $(eval $(call generateRules, $(targetdir))))

$(BIN_EXE): $(OBJ_FILES)
	$(HIDE)echo Linking $@
	$(HIDE)$(CC) $(OBJ_FILES) -o $(BIN_EXE)



directories: 
	$(HIDE)$(MKDIR) $(subst /,$(PSEP),$(TARGETDIRS)) $(ERRIGNORE)

# Remove all objects, dependencies and executable files generated during the build
clean:
	$(HIDE)$(RMDIR) $(subst /,$(PSEP),$(TARGETDIRS)) $(ERRIGNORE)
	$(HIDE)$(RM) $(BIN_EXE) $(ERRIGNORE)
	@echo Cleaning done ! 	


#$(OUTPUT): $(OBJ_FILES) Makefile
#	$(CC) $(LIB_DIRS) $(LD_FLAGS) $(OBJ_FILES) -o $(OUTPUT)

#a0ll: $(info SRC_FILES is $(SRC_FILES)) $(info H_FILES is $(H_FILES))  $(info OBJ_FILES is $(OBJ_FILES)) $(info OBJ_DIR is $(OBJ_DIR)) $(OUTPUT)